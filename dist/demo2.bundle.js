/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/test/demo2.js":
/*!***************************!*\
  !*** ./src/test/demo2.js ***!
  \***************************/
/***/ (() => {

eval("// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAsbuIIP-ioY7Bcw92t7T4U2zVSdIhSWeU\",\r\n  authDomain: \"fir-rtc-53633.firebaseapp.com\",\r\n  projectId: \"fir-rtc-53633\",\r\n  storageBucket: \"fir-rtc-53633.appspot.com\",\r\n  messagingSenderId: \"1003982801167\",\r\n  appId: \"1:1003982801167:web:2e7d1c40b478a67238567a\",\r\n  measurementId: \"G-7JBN7RRSN8\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nmdc.ripple.MDCRipple.attachTo(document.querySelector('.mdc-button'));\r\n\r\nconst configuration = {\r\n  iceServers: [\r\n    {\r\n      urls: [\r\n        'stun:stun1.l.google.com:19302',\r\n        'stun:stun2.l.google.com:19302',\r\n      ],\r\n    },\r\n  ],\r\n  iceCandidatePoolSize: 10,\r\n};\r\n\r\nlet peerConnection = null;\r\nlet localStream = null;\r\nlet remoteStream = null;\r\nlet roomDialog = null;\r\nlet roomId = null;\r\n\r\nfunction init() {\r\n  document.querySelector('#cameraBtn').addEventListener('click', openUserMedia);\r\n  document.querySelector('#hangupBtn').addEventListener('click', hangUp);\r\n  document.querySelector('#createBtn').addEventListener('click', createRoom);\r\n  document.querySelector('#joinBtn').addEventListener('click', joinRoom);\r\n  roomDialog = new mdc.dialog.MDCDialog(document.querySelector('#room-dialog'));\r\n}\r\n\r\nasync function createRoom() {\r\n  document.querySelector('#createBtn').disabled = true;\r\n  document.querySelector('#joinBtn').disabled = true;\r\n  const db = firebase.firestore();\r\n  const roomRef = await db.collection('rooms').doc();\r\n\r\n  console.log('Create PeerConnection with configuration: ', configuration);\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n\r\n  registerPeerConnectionListeners();\r\n\r\n  localStream.getTracks().forEach(track => {\r\n    peerConnection.addTrack(track, localStream);\r\n  });\r\n\r\n  // Code for collecting ICE candidates below\r\n  const callerCandidatesCollection = roomRef.collection('callerCandidates');\r\n\r\n  peerConnection.addEventListener('icecandidate', event => {\r\n    if (!event.candidate) {\r\n      console.log('Got final candidate!');\r\n      return;\r\n    }\r\n    console.log('Got candidate: ', event.candidate);\r\n    callerCandidatesCollection.add(event.candidate.toJSON());\r\n  });\r\n  // Code for collecting ICE candidates above\r\n\r\n  // Code for creating a room below\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  console.log('Created offer:', offer);\r\n\r\n  const roomWithOffer = {\r\n    'offer': {\r\n      type: offer.type,\r\n      sdp: offer.sdp,\r\n    },\r\n  };\r\n  await roomRef.set(roomWithOffer);\r\n  roomId = roomRef.id;\r\n  console.log(`New room created with SDP offer. Room ID: ${roomRef.id}`);\r\n  document.querySelector(\r\n      '#currentRoom').innerText = `Current room is ${roomRef.id} - You are the caller!`;\r\n  // Code for creating a room above\r\n\r\n  peerConnection.addEventListener('track', event => {\r\n    console.log('Got remote track:', event.streams[0]);\r\n    event.streams[0].getTracks().forEach(track => {\r\n      console.log('Add a track to the remoteStream:', track);\r\n      remoteStream.addTrack(track);\r\n    });\r\n  });\r\n\r\n  // Listening for remote session description below\r\n  roomRef.onSnapshot(async snapshot => {\r\n    const data = snapshot.data();\r\n    if (!peerConnection.currentRemoteDescription && data && data.answer) {\r\n      console.log('Got remote description: ', data.answer);\r\n      const rtcSessionDescription = new RTCSessionDescription(data.answer);\r\n      await peerConnection.setRemoteDescription(rtcSessionDescription);\r\n    }\r\n  });\r\n  // Listening for remote session description above\r\n\r\n  // Listen for remote ICE candidates below\r\n  roomRef.collection('calleeCandidates').onSnapshot(snapshot => {\r\n    snapshot.docChanges().forEach(async change => {\r\n      if (change.type === 'added') {\r\n        let data = change.doc.data();\r\n        console.log(`Got new remote ICE candidate: ${JSON.stringify(data)}`);\r\n        await peerConnection.addIceCandidate(new RTCIceCandidate(data));\r\n      }\r\n    });\r\n  });\r\n  // Listen for remote ICE candidates above\r\n}\r\n\r\nfunction joinRoom() {\r\n  document.querySelector('#createBtn').disabled = true;\r\n  document.querySelector('#joinBtn').disabled = true;\r\n\r\n  document.querySelector('#confirmJoinBtn').\r\n      addEventListener('click', async () => {\r\n        roomId = document.querySelector('#room-id').value;\r\n        console.log('Join room: ', roomId);\r\n        document.querySelector(\r\n            '#currentRoom').innerText = `Current room is ${roomId} - You are the callee!`;\r\n        await joinRoomById(roomId);\r\n      }, {once: true});\r\n  roomDialog.open();\r\n}\r\n\r\nasync function joinRoomById(roomId) {\r\n  const db = firebase.firestore();\r\n  const roomRef = db.collection('rooms').doc(`${roomId}`);\r\n  const roomSnapshot = await roomRef.get();\r\n  console.log('Got room:', roomSnapshot.exists);\r\n\r\n  if (roomSnapshot.exists) {\r\n    console.log('Create PeerConnection with configuration: ', configuration);\r\n    peerConnection = new RTCPeerConnection(configuration);\r\n    registerPeerConnectionListeners();\r\n    localStream.getTracks().forEach(track => {\r\n      peerConnection.addTrack(track, localStream);\r\n    });\r\n\r\n    // Code for collecting ICE candidates below\r\n    const calleeCandidatesCollection = roomRef.collection('calleeCandidates');\r\n    peerConnection.addEventListener('icecandidate', event => {\r\n      if (!event.candidate) {\r\n        console.log('Got final candidate!');\r\n        return;\r\n      }\r\n      console.log('Got candidate: ', event.candidate);\r\n      calleeCandidatesCollection.add(event.candidate.toJSON());\r\n    });\r\n    // Code for collecting ICE candidates above\r\n\r\n    peerConnection.addEventListener('track', event => {\r\n      console.log('Got remote track:', event.streams[0]);\r\n      event.streams[0].getTracks().forEach(track => {\r\n        console.log('Add a track to the remoteStream:', track);\r\n        remoteStream.addTrack(track);\r\n      });\r\n    });\r\n\r\n    // Code for creating SDP answer below\r\n    const offer = roomSnapshot.data().offer;\r\n    console.log('Got offer:', offer);\r\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n    const answer = await peerConnection.createAnswer();\r\n    console.log('Created answer:', answer);\r\n    await peerConnection.setLocalDescription(answer);\r\n\r\n    const roomWithAnswer = {\r\n      answer: {\r\n        type: answer.type,\r\n        sdp: answer.sdp,\r\n      },\r\n    };\r\n    await roomRef.update(roomWithAnswer);\r\n    // Code for creating SDP answer above\r\n\r\n    // Listening for remote ICE candidates below\r\n    roomRef.collection('callerCandidates').onSnapshot(snapshot => {\r\n      snapshot.docChanges().forEach(async change => {\r\n        if (change.type === 'added') {\r\n          let data = change.doc.data();\r\n          console.log(`Got new remote ICE candidate: ${JSON.stringify(data)}`);\r\n          await peerConnection.addIceCandidate(new RTCIceCandidate(data));\r\n        }\r\n      });\r\n    });\r\n    // Listening for remote ICE candidates above\r\n  }\r\n}\r\n\r\nasync function openUserMedia(e) {\r\n  const stream = await navigator.mediaDevices.getUserMedia(\r\n      {video: true, audio: true});\r\n  document.querySelector('#localVideo').srcObject = stream;\r\n  localStream = stream;\r\n  remoteStream = new MediaStream();\r\n  document.querySelector('#remoteVideo').srcObject = remoteStream;\r\n\r\n  console.log('Stream:', document.querySelector('#localVideo').srcObject);\r\n  document.querySelector('#cameraBtn').disabled = true;\r\n  document.querySelector('#joinBtn').disabled = false;\r\n  document.querySelector('#createBtn').disabled = false;\r\n  document.querySelector('#hangupBtn').disabled = false;\r\n}\r\n\r\nasync function hangUp(e) {\r\n  const tracks = document.querySelector('#localVideo').srcObject.getTracks();\r\n  tracks.forEach(track => {\r\n    track.stop();\r\n  });\r\n\r\n  if (remoteStream) {\r\n    remoteStream.getTracks().forEach(track => track.stop());\r\n  }\r\n\r\n  if (peerConnection) {\r\n    peerConnection.close();\r\n  }\r\n\r\n  document.querySelector('#localVideo').srcObject = null;\r\n  document.querySelector('#remoteVideo').srcObject = null;\r\n  document.querySelector('#cameraBtn').disabled = false;\r\n  document.querySelector('#joinBtn').disabled = true;\r\n  document.querySelector('#createBtn').disabled = true;\r\n  document.querySelector('#hangupBtn').disabled = true;\r\n  document.querySelector('#currentRoom').innerText = '';\r\n\r\n  // Delete room on hangup\r\n  if (roomId) {\r\n    const db = firebase.firestore();\r\n    const roomRef = db.collection('rooms').doc(roomId);\r\n    const calleeCandidates = await roomRef.collection('calleeCandidates').get();\r\n    calleeCandidates.forEach(async candidate => {\r\n      await candidate.ref.delete();\r\n    });\r\n    const callerCandidates = await roomRef.collection('callerCandidates').get();\r\n    callerCandidates.forEach(async candidate => {\r\n      await candidate.ref.delete();\r\n    });\r\n    await roomRef.delete();\r\n  }\r\n\r\n  document.location.reload(true);\r\n}\r\n\r\nfunction registerPeerConnectionListeners() {\r\n  peerConnection.addEventListener('icegatheringstatechange', () => {\r\n    console.log(\r\n        `ICE gathering state changed: ${peerConnection.iceGatheringState}`);\r\n  });\r\n\r\n  peerConnection.addEventListener('connectionstatechange', () => {\r\n    console.log(`Connection state change: ${peerConnection.connectionState}`);\r\n  });\r\n\r\n  peerConnection.addEventListener('signalingstatechange', () => {\r\n    console.log(`Signaling state change: ${peerConnection.signalingState}`);\r\n  });\r\n\r\n  peerConnection.addEventListener('iceconnectionstatechange ', () => {\r\n    console.log(\r\n        `ICE connection state change: ${peerConnection.iceConnectionState}`);\r\n  });\r\n}\r\n\r\ninit();\n\n//# sourceURL=webpack://moments/./src/test/demo2.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/test/demo2.js"]();
/******/ 	
/******/ })()
;