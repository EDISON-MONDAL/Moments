jquery ajax techniques: 

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    // cdn

    // page load
    main.js
        // sub body left side navigator
        function subBodyLeftSideNavigator(){
            document.querySelector('#homeButton span').style.color = 'red'

            $("#subBodyLeftSide-navigator").load("leftNav_12345", function(responseTxt, statusTxt, xhr){
                if(statusTxt == "success")
                    console.warn("left navigator loaded successfully!");
                if(statusTxt == "error")
                    alert("Can't load left navigator! Error: " + xhr.status + ": " + xhr.statusText);
            })
        }
        // sub body left side navigator

       ************* URL is server.js 
        app.use('/leftNav_12345', (req, res) => {
            res.render('leftNav')
        }) 
       method **********************

    // page load
    
    // form load
        updateAllProfile.ejs

            <form action="" id="formAddProfileImg">
              <input type="file" id="selectNewProfileImage" name="newProfileImgFile" accept="image/*">
              <label for="selectNewProfileImage">
                <span class="material-icons-outlined addNewProfilePic">add_photo_alternate</span>
              </label>
            </form>

            <img src="" alt="" id="previewProfileImgTag">
            
            <script>

                const formAddProfileImg = document.querySelector('#formAddProfileImg')
                const selectNewProfileImage = document.querySelector('#selectNewProfileImage')
        
                let compressed_image_url

                formAddProfileImg.onchange = (e)=>{
                    
                    const formData = new FormData(formAddProfileImg); // create a FormData object from the form data
                    $.ajax({
                        url: '/resizeNewProfilePic', // your server-side endpoint for handling file uploads
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(data) {
                            //console.log(data)
                            document.getElementById('previewProfileImgTag').src = "data:image/jpeg;base64," + data.base64image
              
                            // creat context ( only for convert base64 to image url to upload into firestore )             
                            document.getElementById('previewProfileImgTag').onload = (e) => {
                                const canvas = document.createElement("canvas")
                                canvas.width = 1000
                                canvas.height = 500

                                const context = canvas.getContext("2d")
                                context.drawImage(document.getElementById('previewProfileImgTag'), 0, 0, canvas.width, canvas.height)
                                canvas.toBlob((blob) => {
                                    compressed_image_url = blob
                                }, 'image/jpeg')
                            }
                            // creat context ( only for convert base64 to image url to upload into firestore )    
                        },
                        error: function(xhr, status, error) {
                            console.error('Error uploading file:', error);
                        }
                    });          
                }
            </script>

            // webpack js
                // resized and compressed image upoload now
                const selectNewProfileImage = document.querySelector('#selectNewProfileImage')
                const file = selectNewProfileImage.files[0]

                const storageRefMini = ref(storage, 'profilePictures/'+ myId + '/' + file.name + new Date() + 'mini' ); //assign the path of pic
                const uploadTaskMini = uploadBytesResumable(storageRefMini, compressed_image_url, metadata);
      
                // Listen for state changes, errors, and completion of the upload.
                uploadTaskMini.on('state_changed',
                    (snapshot) => {
                      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                      const progressMini = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                      console.warn('Upload mini is ' + progressMini + '% done');
                      switch (snapshot.state) {
                        case 'paused':
                          console.warn('Upload is paused mini');
                        break;
                        case 'running':
                          console.warn('Upload is running mini');
                        break;
                      }
                    }, 
                    (error) => {
                      // A full list of error codes is available at
                      // https://firebase.google.com/docs/storage/web/handle-errors
                      switch (error.code) {
                        case 'storage/unauthorized':
                          // User doesn't have permission to access the object
                        break;
                        case 'storage/canceled':
                          // User canceled the upload
                        break;
                        case 'storage/unknown':
                          // Unknown error occurred, inspect error.serverResponse
                        break;
                      }
                   }, 
                   async () => {            
                      // Upload completed successfully, now we can get the download URL
                      getDownloadURL(uploadTaskMini.snapshot.ref).then(async (downloadURLMini) => {
                        console.warn('compressed image available: ', downloadURLMini);
                      });
                   }
                )
              // resized and compressed image upoload now
            // webpack js

        // server.js
            // image resizing and compression
                app.post('/resizeNewProfilePic', multerUpload.single('newProfileImgFile'), (req, res) => {
                    // req.file 
                    // req.file.buffer
                    // req.file.buffer.toString('base64')

                    sharp( req.file.buffer )
                    .resize(1000, 500)
                    .toBuffer((err, outputBuffer) => {
                        if (err) {
                            return res.status(500).send('Error resizing image');
                        }
                        // render updateAllProfile.js
                        res.send( { base64image: outputBuffer.toString('base64') } );
                    })
                });
            // image resizing and compression
    // form load
jquery ajax techniques: 